#include <string.h>
#ifdef __APPLE__
#include <GLUT/glut.h>
#else
#include <GL/glut.h>
#endif

#include <stdlib.h>
/* GLUT callback Handlers */

float px1,px2,px3,px4,px5;
float py1,py2,py3,py4,py5;
float curveX,curveY;
double t;

char counter;

void resize(int width, int height)
{
    if(width<=height)
        glViewport(0,(GLsizei) (height-width)/2,(GLsizei) width,(GLsizei) width);

    else
        glViewport((GLsizei) (width-height)/2 ,0 ,(GLsizei) height,(GLsizei) height);
}

void init()
{
 glMatrixMode(GL_PROJECTION);
 glLoadIdentity();
 glOrtho(-2.5,2.75,10.5,0, -1.0, 1.0); // adjusted for suitable viewport

}
void curveOne()
{
           px1=-1,px2=0,px3=2,px4=3;
           py1=8,py2=4,py3=6,py4=9;

          for(t=0.0;t<=1.0;t+=0.001)
    {
         curveX =(1-t)*(1-t)*(1-t) * px1 + 3*t*(1-t)*(1-t)*px2 + 3*t*t*(1-t)*px3 + t*t*t*px4;
         curveY =(1-t)*(1-t)*(1-t)* py1 + 3*t*(1-t)*(1-t)*py2 + 3*t*t*(1-t)*py3 + t*t*t*py4;
         glBegin(GL_POINTS);
         glVertex3d(curveX,curveY,0);
         glEnd();

     }
}

void curveTwo()
{
          px1=-1,px2=-3,px3=2.6,px4=-0.2;
           py1=8,py2=3,py3=4,py4=8.3;

          for(t=0.0;t<=1.0;t+=0.001)
    {
         curveX =(1-t)*(1-t)*(1-t) * px1 + 3*t*(1-t)*(1-t)*px2 + 3*t*t*(1-t)*px3 + t*t*t*px4;
         curveY =(1-t)*(1-t)*(1-t)* py1 + 3*t*(1-t)*(1-t)*py2 + 3*t*t*(1-t)*py3 + t*t*t*py4;
         glBegin(GL_POINTS);
         glVertex3d(curveX,curveY,0);
         glEnd();

     }


}

void curveThree()
{
           px1=-1,px2=2.5,px3=-2.7,px4=0.5;
           py1=9.3,py2=0,py3=0,py4=9.3;

          for(t=0.0;t<=1.0;t+=0.001)
    {
         curveX =(1-t)*(1-t)*(1-t) * px1 + 3*t*(1-t)*(1-t)*px2 + 3*t*t*(1-t)*px3 + t*t*t*px4;
         curveY =(1-t)*(1-t)*(1-t)* py1 + 3*t*(1-t)*(1-t)*py2 + 3*t*t*(1-t)*py3 + t*t*t*py4;
         glBegin(GL_POINTS);
         glVertex3d(curveX,curveY,0);
         glEnd();

     }


}
void curveFour()
{
           px1=-1,px2=0.4,px3=2.5,px4=3.4;
           py1=9.3,py2=4.5,py3=12.5,py4=1;

          for(t=0.0;t<=1.0;t+=0.001)
    {
         curveX =(1-t)*(1-t)*(1-t) * px1 + 3*t*(1-t)*(1-t)*px2 + 3*t*t*(1-t)*px3 + t*t*t*px4;
         curveY =(1-t)*(1-t)*(1-t)* py1 + 3*t*(1-t)*(1-t)*py2 + 3*t*t*(1-t)*py3 + t*t*t*py4;
         glBegin(GL_POINTS);
         glVertex3d(curveX,curveY,0);
         glEnd();

     }

}
void curveFive()
{
           px1=-1,px2=0.4,px3=2.0,px4=2.3,px5=0.8;
           py1=9.3,py2=4.5,py3=21.0,py4=6.3,py5=7.5;

          for(t=0.0;t<=1.0;t+=0.001)
    {
         curveX =(1-t)*(1-t)*(1-t)*(1-t) * px1 + 4*t*(1-t)*(1-t)*(1-t)*px2 + 4*t*t*(1-t)*(1-t)*px3 + 4*t*t*t*(1-t)*px4 + t*t*t*t*px5;
         curveY =(1-t)*(1-t)*(1-t)*(1-t) * py1 + 4*t*(1-t)*(1-t)*(1-t)*py2 + 4*t*t*(1-t)*(1-t)*py3 + 4*t*t*t*(1-t)*py4 + t*t*t*t*py5;
         glBegin(GL_POINTS);
         glVertex3d(curveX,curveY,0);
         glEnd();

     }


}
void display(void)
{
  glClear (GL_COLOR_BUFFER_BIT);        // clear display screen
if(counter == 1)
  curveOne();
if(counter == 2)
  curveTwo();
if(counter == 3)
  curveThree();
if(counter == 4)
  curveFour();
if(counter == 5)
  curveFive();
  glFlush ();                           // clear buffer
}


void key(unsigned char key, int x, int y)
{
    switch (key)
    {
        case '1' :
            counter = 1;
            break;
        case '2' :
            counter = 2;
            break;
        case '3' :
            counter = 3;
            break;
        case '4' :
            counter = 4;
            break;
        case '5' :
            counter = 5;
            break;
       case 'q' :
            exit(0);
            break;
    }

    glutPostRedisplay();
}


/* Program entry point */

int main(int argc, char *argv[])
{
   glutInit(&argc, argv);
   glutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);
   glutInitWindowSize (250, 250);                //window screen
   glutInitWindowPosition (100, 100);            //window position
   glutCreateWindow ("Program1");                //program title
   init();
   glutDisplayFunc(display);                     //callback function for display
   glutReshapeFunc(resize);                      //callback for reshape
   glutKeyboardFunc(key);                        //callback function for keyboard
   glutMainLoop();                               //loop

    return EXIT_SUCCESS;
}
